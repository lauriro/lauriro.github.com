---
layout: post
title: Shell notes
summary: .
tags: [shell, ssh, tar]
---

h2(#coping). Coping files

{% highlight bash %}


IP=1.2.3.4; IP=(${IP//./ }); Rev=${IP[3]}.${IP[2]}.${IP[1]}.${IP[0]}; echo $Rev

Filesize:
stat -c%s temp.txt
cat temp.txt | wc -c


kill -9 `ps -ef |grep stunnel|grep -v grep | awk '{print $2}'`

Git sha1:
echo -en "blob 7\0foobar\n" | sha1sum


Defininition

$var							: replace by the value of the variable $var if defined. Otherwise nothing.
${var}						: replace by the value of the variable $var if defined. Otherwise nothing. Better use this, in order to protect from certain inconsistencies when using Strings. 
${var:-default}		:replace by the value of the variable $ var "if defined. Otherwise the value default.
${var:+default}		: Set the variable $var with the value default if defined. Otherwise leave empty.
${var:?"Message"}	: replace by the value of the variable $var if defined. Otherwise, the shell displays specific error message instead of "Message". 
${var:=default}		: replace by the value of the variable $var if defined. Otherwise create and initialize the variable var with the Value default.


Given:
foo=/tmp/my.dir/filename.tar.gz 

We can use these expressions:
path = ${foo%/*}
To get: /tmp/my.dir (like dirname)
file = ${foo##*/}
To get: filename.tar.gz (like basename)
base = ${file%%.*}
To get: filename 
ext = ${file#*.}
To get: tar.gz 

${string/substring/replacement} Replace first match of $substring with $replacement
${string//substring/replacement} Replace all matches of $substring with $replacement
${string/#substring/replacement} If $substring matches front end of $string, substitute $replacement for $substring
${string/%substring/replacement} If $substring matches back end of $string, substitute $replacement for $substring


tar czf - /path/directory_to_get | ssh user@host "cat > /path/data.tgz" 
tar czf - /path/directory_to_get | ssh user@host tar xzf - -C /path/

ssh user@host "tar czf - /path/directory_to_get" | cat > /path/data.tgz
ssh user@host "tar czf - /path/directory_to_get" | tar xzvf - -C /path/

cat ~/.ssh/id_rsa.pub | ssh example.host "cat - >> ~/.ssh/authorized_keys"
wget -qO- http://www.rooden.ee/pub/id_rsa.pub >> ~/.ssh/authorized_keys


# Extract tarball from internet without local saving
wget -qO - "http://www.tarball.com/tarball.gz" | tar zxvf -

{% endhighlight %}

h2(#database). Loops

{% highlight bash %}
for f in *.erl ; do erlc +debug_info -o ../ebin $f; done

for (( c=1; c<=5; c++ )); do echo "Welcome $c times..."; done

for i in $(echo "one;two;three" | tr ";" "\n") ; do echo $i; done
{% endhighlight %}


h2(#database). Database

{% highlight bash %}
mysqldump --quick -u user -p pass -h host database | mysql -u user -p pass -P port -h host

ssh user@host "mysqldump -u user -p pass -h sqlhost database | gzip -cf9" | cat > /path/database.gz

mysql -u user -p pass < query.sql > result.txt
{% endhighlight %}

h2(#permissions). File system permissions

{% highlight bash %}
find /www -type d -print0 | xargs -0 chmod 0755
find /www -type f -print0 | xargs -0 chmod 0644

ls -1 -b | grep \.avi | while read FILE; do mkdir "${FILE%%.avi}"; mv "$FILE" "${FILE%%.avi}"; done
find ./ | grep \.dropbox | while read FILE; do rm "$FILE"; done

find . -name *.conf -print0 | xargs -0 grep -l -Z mem_limit | xargs -0 -i cp {} {}.bak

{% endhighlight %}


for project in list-of-lots-of-projects; do ( \
mkdir "$project"; cd "$project"
git svn init "svn+ssh://user@svnserver.ee/opt/svn/$project" --no-metadata
git config svn.authorsfile /Users/cj/Documents/svn-src/users.txt
git svn fetch ); done

ps -wax -o rss= -p `pgrep -f 'php-cgi'` | awk 'BEGIN {s=0}{s = s + $1} END {print "Total memory used: " s "K"}'
grep "?mod=update" access.log | awk 'BEGIN {s=0} { s+=1; print $4,$5 " - " $1 " - asukoht: " $11 } END { print "-\nKokku leitud ridu:", s ,"\n-"}'
curl -d '{"method":"evlog_insert","params":[{"evcode":"test","origin":"web","ts":123,"ids":[1,3,5] }]}' http://192.168.1.193:8000/json-rpc

http://sourceforge.net/projects/console/